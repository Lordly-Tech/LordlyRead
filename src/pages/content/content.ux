<template>
  <div class="page {{pageClass}}" @swipe="pageSwipe">
    <div class="body">
      <div class="topbar space-between" style="color: rgba(255, 255, 255, {{paragraph_color}});">
        <text class="info mx-lg my-xs ellipsis">{{ bookName }}</text>
        <text class="info mx-lg my-xs no-shrink">{{ time }}</text>
      </div>
      <div class="vertical-separator"></div>
      <scroll class="body-container" id="body" style="height: {{bodyHeight}}px" scroll-y="true" bounces="true"
        @longpress="onLongPress" @click="onClick" @scrolltop="scrolltop" @scrollbottom="scrollbottom" @scroll="scroll">
        <text class="chapter"
          style="text-align: {{chapter_title_align}}; font-size: {{paragraph_size * chapter_title_size}}px; color: rgba(255, 255, 255, {{chapter_title_color}}); margin-top: {{paragraph_size * chapter_title_top_margin}}px; margin-bottom: {{paragraph_size * chapter_title_bottom_margin}}px;">
          {{ chapter.chapterName }}
        </text>
        <text for="text in content"
          style="font-size: {{paragraph_size}}px; color: rgba(255, 255, 255, {{paragraph_color}}); margin-bottom: {{paragraph_size * paragraph_spacing}}px; font-weight: {{paragraph_weight}};">
          {{ text }}
        </text>
      </scroll>
      <div class="menu {{ menu }}">
        <div class="topbar">
          <div class="topbar-btn no-shrink" @click="back">
            <image src="/common/icon/back.png" class="icon" />
          </div>
          <text class="title ellipsis">{{ bookName }}</text>
          <div class="topbar-btn no-shrink" @click="back('/')">
            <image src="/common/icon/close.png" class="icon" />
          </div>
        </div>
        <div class="body">
          <scroll class="body-container" scroll-y="true" bounces="true">
            <div class="justify-center my-xs">
              <text class="info ma-0 mr-xs ellipsis">{{ chapter.chapterName }}</text>
              <text class="info ma-0 no-shrink">({{ chapterIndex + 1 }}/{{ chapterCount }})</text>
            </div>
            <div class="mb-xs">
              <div class="card ma-0 mr-xs" @click="lastChapter">
                <image src="/common/icon/left.png" class="icon" />
              </div>
              <div class="card ma-0 mr-xs grow justify-center" @click="toCatalog">
                <image src="/common/icon/catalog.png" class="icon" />
                <text class="card-btn-text center">目录</text>
              </div>
              <div class="card ma-0" @click="nextChapter">
                <image src="/common/icon/right.png" class="icon" />
              </div>
            </div>
            <div class="card" @click="load(true)">
              <image src="/common/icon/refresh.png" class="icon" />
              <text class="card-btn-text center">刷新</text>
            </div>
            <div class="card" @click="toggleDownloadMenu">
              <image src="/common/icon/down.png" class="icon" />
              <text class="card-btn-text center">缓存</text>
            </div>
            <div class="card" @click="wait">
              <image src="/common/icon/magic.png" class="icon" />
              <text class="card-btn-text center">替换净化</text>
            </div>
            <div class="card" @click="wait">
              <image src="/common/icon/up.png" class="icon" />
              <text class="card-btn-text center">更新目录</text>
            </div>
            <div class="card" @click="wait">
              <image src="/common/icon/library.png" class="icon" />
              <text class="card-btn-text center">换源</text>
            </div>
            <div class="card" @click="push('pages/setting', [['to', 'read_ui']])">
              <image src="/common/icon/ui.png" class="icon" />
              <text class="card-btn-text center">界面</text>
            </div>
            <div class="card" @click="push('pages/setting', [['to', 'read_setting']])">
              <image src="/common/icon/setting.png" class="icon" />
              <text class="card-btn-text center">设置</text>
            </div>
          </scroll>
          <div class="menu justify-start {{ downloadMenu }}">
            <scroll class="body-container" scroll-y="true" bounces="true">
              <div class="justify-center my-xs">
                <text class="info ma-0 mr-xs grow ellipsis">{{ down.state }}</text>
                <text class="info ma-0 no-shrink">
                  ({{ down.progress ?? 0 }}/{{ down.endI - down.startI + 1 }})
                </text>
              </div>
              <text class="card-btn-secondary">起始章节</text>
              <div class="choose-container my-xs">
                <div class="choose-item" @click="setV('down.startI', Math.max(1, down.startI - 10))">
                  <image src="/common/icon/left-double.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item" @click="setV('down.startI', Math.max(1, down.startI - 1))">
                  <image src="/common/icon/left.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <text class="choose-item choose-item-active grow">
                  {{ down.startI }}
                </text>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item" @click="setV('down.startI', Math.min(chapterCount, down.endI, down.startI + 1))">
                  <image src="/common/icon/right.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item"
                  @click="setV('down.startI', Math.min(chapterCount, down.endI, down.startI + 10))">
                  <image src="/common/icon/right-double.png" class="icon" />
                </div>
              </div>
              <text class="card-btn-secondary">结束章节</text>
              <div class="choose-container my-xs">
                <div class="choose-item" @click="setV('down.endI', Math.max(down.startI, down.endI - 10))">
                  <image src="/common/icon/left-double.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item" @click="setV('down.endI', Math.max(down.startI, down.endI - 1))">
                  <image src="/common/icon/left.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <text class="choose-item choose-item-active grow">
                  {{ down.endI }}
                </text>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item" @click="setV('down.endI', Math.min(chapterCount, down.endI + 1))">
                  <image src="/common/icon/right.png" class="icon" />
                </div>
                <div class="horizontal-separator transparent w-xs"></div>
                <div class="choose-item" @click="setV('down.endI', Math.min(chapterCount, down.endI + 10))">
                  <image src="/common/icon/right-double.png" class="icon" />
                </div>
              </div>
              <div class="choose-container my-xs">
                <text class="choose-item grow" @click="setV('down.endI', Math.min(chapterCount, down.startI + 5))">
                  后5章
                </text>
                <div class="horizontal-separator transparent w-xs"></div>
                <text class="choose-item grow" @click="setV('down.endI', Math.min(chapterCount, down.startI + 10))">
                  后10章
                </text>
                <div class="horizontal-separator transparent w-xs"></div>
                <text class="choose-item grow" @click="setV('down.endI', chapterCount)">
                  后续全部
                </text>
              </div>
              <progress class="my-xs progress" percent="{{down.progress/(down.endI-down.startI+1)*100}}"></progress>
              <text for="text in down.log" class="card-btn-secondary my-xs" style="color: red">
                {{ text }}
              </text>
              <div class="card justify-center" @click="download">
                <text class="card-btn-text ma-0">
                  {{ this.down.progress ? "缓存中" : "提交" }}
                </text>
              </div>
            </scroll>
          </div>
        </div>
      </div>
      <div class="menu {{ confirmMenu }}">
        <div class="topbar">
          <div class="topbar-btn no-shrink" @click="back">
            <image src="/common/icon/back.png" class="icon" />
          </div>
          <text class="title">放入书架</text>
          <div class="topbar-btn no-shrink" @click="back('/')">
            <image src="/common/icon/close.png" class="icon" />
          </div>
        </div>
        <div class="body pa-md">
          <div class="grow start">
            <text class="card-btn-text ma-0">是否将《{{ bookName }}》放入书架</text>
          </div>
          <div class="card justify-center" @click="back(true)">
            <text class="card-btn-text center ma-0">否</text>
          </div>
          <div class="card justify-center" @click="addToShelf">
            <text class="card-btn-text center ma-0">确定</text>
          </div>
        </div>
      </div>
    </div>
    <div class="cover-animation-helper {{coverAnimation}}"></div>
  </div>
</template>

<script>
const {template, router, device, date, setting, chapter, book, helper} = global
import brightness from "@system.brightness"

let longpress = false
let swipe = false
let bookData = undefined
let thisBook = undefined

export default {
  ...template,
  private: {
    ...template.private,
    menu: "",
    downloadMenu: "",
    confirmMenu: "",
    time: date.formatNow("hh:mm"),
    paragraph_weight: setting.get("paragraph_weight"),
    paragraph_size: setting.get("paragraph_size"),
    paragraph_color: setting.get("paragraph_color"),
    paragraph_spacing: setting.get("paragraph_spacing"),
    chapter_title_align: setting.get("chapter_title_align"),
    chapter_title_size: setting.get("chapter_title_size"),
    chapter_title_color: setting.get("chapter_title_color"),
    chapter_title_top_margin: setting.get("chapter_title_top_margin"),
    chapter_title_bottom_margin: setting.get("chapter_title_bottom_margin"),
    bookData: undefined,
    bookName: undefined,
    chapter: undefined,
    chapterIndex: undefined,
    chapterCount: undefined,
    content: [],
    loading: false,
    lock: 0,
    last: false,
    down: {
      state: "等待缓存开始",
      progress: undefined,
      startI: undefined,
      endI: undefined,
      log: []
    }
  },
  ...router,
  onReady() {
    try {
      bookData = JSON.parse(this.bookData)
      if (bookData.toc?.length === 0) {
        this.toast("目录为空")
        throw new Error("目录为空")
      }
      thisBook = book.getBook(bookData.bookSourceUrl, bookData.bookUrl)
      this.bookName = bookData.name
      this.chapterCount = bookData.toc.length
      this.chapterIndex = thisBook?.progress ?? 0
      this.load()
    } catch (e) {
      this.toast("参数错误")
      this.back()
    }
  },
  onRefresh() {
    console.log(this.chapterIndex)
    try {
      bookData = JSON.parse(this.bookData)
      if (bookData.toc?.length === 0) {
        this.toast("目录为空")
        throw new Error("目录为空")
      }
      thisBook = book.getBook(bookData.bookSourceUrl, bookData.bookUrl)
      this.bookName = bookData.name
      this.chapterCount = bookData.toc.length
      this.chapterIndex = thisBook?.progress ?? 0
      this.load()
    } catch (e) {
      this.toast("参数错误")
      this.back()
    }
  },
  onInit() {
    setInterval(() => {
      this.time = date.formatNow("hh:mm")
    }, 1000)
    try {
      if (setting.get("keep_screen_on")) {
        brightness.setKeepScreenOn({
          keepScreenOn: true
        })
      }
    } catch {}
  },
  onBack(confirm, ...args) {
    swipe = true
    if (this.downloadMenu === "animation-in") {
      this.toggleDownloadMenu()
      return true
    }
    if (this.menu === "animation-in") {
      this.toggleMenu()
      return true
    }
    if (this.confirmMenu === "animation-in" && !(confirm === true)) {
      this.toggleConfirmMenu()
      return true
    }
    if (!thisBook && setting.get("default_add") && !(confirm === true)) {
      this.toggleConfirmMenu()
      return true
    }
    try {
      brightness.setKeepScreenOn({
        keepScreenOn: false
      })
    } catch {}
  },
  toggleMenu(close) {
    if (this.menu === "animation-in") {
      this.menu = "animation-out-back"
    } else if (close !== true) {
      this.menu = "animation-in"
    }
  },
  toggleDownloadMenu() {
    if (this.downloadMenu === "animation-in") {
      this.downloadMenu = "animation-out-back"
    } else {
      this.downloadMenu = "animation-in"
      if (this.down.startI === undefined) {
        this.down.startI = this.chapterIndex + 1
      }
      if (this.down.endI === undefined) {
        this.down.endI = this.chapterCount
      }
    }
  },
  toggleConfirmMenu() {
    if (this.confirmMenu === "animation-in") {
      this.confirmMenu = "animation-out-back"
    } else {
      this.confirmMenu = "animation-in"
    }
  },
  addToShelf() {
    thisBook = book.getBookFromData(bookData)
    thisBook.progress = this.chapterIndex
    book.add(thisBook)
    this.toast("添加成功")
    this.back(true)
  },
  setV(path, newValue) {
    console.log(path, newValue)
    helper.setPropertyValue(this, path, newValue)
  },
  onLongPress() {
    if (swipe) {
      swipe = false
      return
    }
    longpress = true
    this.toggleMenu()
  },
  async onClick(evt) {
    if (longpress) {
      longpress = false
      return
    }
    const click_to_turn_page = setting.get("click_to_turn_page")
    const info = await device.getInfo()
    if (click_to_turn_page === "vertical") {
      if (evt.clientY < info.screenHeight / 2) {
        this.lastPage()
      } else {
        this.nextPage()
      }
    } else if (click_to_turn_page === "horizontal") {
      if (evt.clientX < info.screenWidth / 2) {
        this.lastPage()
      } else {
        this.nextPage()
      }
    }
  },
  async nextPage() {
    this.$element("body").scrollBy({
      top: this.bodyHeight,
      behavior: setting.get("smooth_scroll") ? "smooth" : "auto"
    })
  },
  async lastPage() {
    this.$element("body").scrollBy({
      top: -this.bodyHeight,
      behavior: setting.get("smooth_scroll") ? "smooth" : "auto"
    })
  },
  updateSetting() {
    this.paragraph_weight = setting.get("paragraph_weight")
    this.paragraph_size = setting.get("paragraph_size")
    this.paragraph_color = setting.get("paragraph_color")
    this.paragraph_spacing = setting.get("paragraph_spacing")
    this.chapter_title_align = setting.get("chapter_title_align")
    this.chapter_title_size = setting.get("chapter_title_size")
    this.chapter_title_color = setting.get("chapter_title_color")
    this.chapter_title_top_margin = setting.get("chapter_title_top_margin")
    this.chapter_title_bottom_margin = setting.get("chapter_title_bottom_margin")
    this.down.state = "等待缓存开始"
    this.down.progress = undefined
    this.down.startI = undefined
    this.down.endI = undefined
    this.down.log = []
    try {
      if (setting.get("keep_screen_on")) {
        brightness.setKeepScreenOn({
          keepScreenOn: true
        })
      } else {
        brightness.setKeepScreenOn({
          keepScreenOn: false
        })
      }
    } catch {}
  },
  toCatalog() {
    if (!thisBook.toc) {
      this.toast("目录加载中")
      return
    }
    this.push("/pages/catalog", [["bookData", thisBook ?? bookData]])
  },
  nextChapter() {
    this.chapterIndex++
    this.load()
  },
  lastChapter() {
    this.chapterIndex--
    if (bookData.toc?.[this.chapterIndex]?.isVolume) {
      return this.lastChapter()
    }
    this.last = true
    this.load()
  },
  load(isRefresh) {
    if (this.loading) {
      this.toast("正在加载中，请勿重复操作")
      return
    }
    if (bookData.toc?.[this.chapterIndex]?.isVolume) {
      this.chapterIndex++
      return this.load()
    }
    if (this.chapterIndex >= bookData.toc.length) {
      this.toast("没有更多章节了")
      return
    }
    this.loading = true
    this.toast("正在加载中")
    this.content = ["正在加载中"]
    this.chapter = bookData.toc[this.chapterIndex]
    const contentPromise =
      isRefresh === true
        ? chapter.defineChapter(this.chapter, bookData).getOnlineContent()
        : chapter.defineChapter(this.chapter, bookData).getContent()
    contentPromise
      .then((content) => {
        this.content = content.split("\n")
        if (thisBook && thisBook?.progress !== this.chapterIndex) {
          thisBook.progress = this.chapterIndex
        }
        helper.sleep(0).then(() => {
          this.loading = false
          this.toggleMenu(true)
          if (thisBook || this.last) {
            this.$element("body").getScrollRect({
              success: ({height}) => {
                if (thisBook && !this.last) {
                  this.$element("body").scrollTo({
                    top: height * (thisBook.fProgress - thisBook.progress),
                    behavior: "auto"
                  })
                } else {
                  this.$element("body").scrollTo({
                    top: height - 1
                  })
                  this.last = false
                }
              }
            })
          } else {
            this.$element("body").scrollTo({
              top: 1,
              behavior: "auto"
            })
          }
        })
        // 预加载
        for (let index = 0; index < setting.get("preload"); index++) {
          chapter.defineChapter(bookData.toc[this.chapterIndex + index + 1], bookData).getContent()
        }
      })
      .catch((err) => {
        this.toast(err)
        this.content = ["加载失败", err]
        this.loading = false
      })
  },
  scrolltop() {
    if (this.lock === 0) {
      this.lock++
      helper.sleep(2000).then(() => {
        this.lock = 0
      })
      return
    }
    if (this.lock === 1) {
      this.toast("再拉一下加载上一章")
      this.lock++
      return
    }
    this.lastChapter()
  },
  scrollbottom() {
    if (this.lock === 0) {
      this.lock++
      helper.sleep(2000).then(() => {
        this.lock = 0
      })
      return
    }
    if (this.lock === 1) {
      this.toast("再拉一次加载下一章")
      this.lock++
      return
    }
    this.nextChapter()
  },
  scroll(event) {
    if (thisBook) {
      this.$element("body").getScrollRect({
        success({height}) {
          thisBook.fProgress = thisBook.progress + event.scrollY / height
        }
      })
    }
  },
  async download() {
    if (this.down.progress !== undefined) {
      this.toast("正在下载中，请勿重复操作")
      return
    }
    this.down.state = "正在开始下载"
    this.down.log = []
    for (let i = this.down.startI; i <= this.down.endI; i++) {
      this.down.state = `下载中：${i}`
      if (bookData.toc[i - 1].isVolume) {
        this.down.progress = i - this.down.startI + 1
        continue
      }
      const chapt = chapter.defineChapter(bookData.toc[i - 1], bookData)
      try {
        global.runGC()
        await chapt.downloadContent()
      } catch (error) {
        this.down.log.push(`第${i}章下载失败：${error}`)
      }
      this.down.progress = i - this.down.startI + 1
    }
    this.down.state = "下载完成"
    this.toast("下载完成")
    await helper.sleep(1000)
    this.down.progress = undefined
  }
}
</script>

<style>
@import url(../../common/css/page.css);

.chapter {
  font-weight: bold;
}
</style>