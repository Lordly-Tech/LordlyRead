<template>
  <div class="page {{pageClass}}" @swipe="pageSwipe">
    <div class="body">
      <div class="topbar space-between">
        <text class="info mx-lg my-xs ellipsis">{{ bookName }}</text>
        <text class="info mx-lg my-xs no-shrink">{{ time }}</text>
      </div>
      <div class="vertical-separator"></div>
      <scroll class="body-container" id="body" style="height: {{bodyHeight}}px" scroll-y="true" bounces="true"
        @longpress="onLongPress" @click="onClick" @scrolltop="scrolltop" @scrollbottom="scrollbottom" @scroll="scroll">
        <text class="chapter"
          style="text-align: {{chapter_title_align}}; font-size: {{paragraph_size * chapter_title_size}}px; margin-top: {{paragraph_size * chapter_title_top_margin}}px; margin-bottom: {{paragraph_size * chapter_title_bottom_margin}}px;">
          {{ chapter.chapterName }}
        </text>
        <text for="text in content"
          style="font-size: {{paragraph_size}}px; margin-bottom: {{paragraph_size * paragraph_spacing}}px; font-weight: {{paragraph_weight}};">
          {{ text }}
        </text>
      </scroll>
      <div class="menu {{ menu }}">
        <div class="topbar">
          <div class="topbar-btn no-shrink" @click="back">
            <image src="/common/icon/back.png" class="icon" />
          </div>
          <text class="title ellipsis">{{ bookName }}</text>
          <div class="topbar-btn no-shrink" @click="back('/')">
            <image src="/common/icon/close.png" class="icon" />
          </div>
        </div>
        <scroll class="body-container" scroll-y="true" bounces="true">
          <div class="justify-center my-xs">
            <text class="info ma-0 mr-xs ellipsis">{{ chapter.chapterName }}</text>
            <text class="info ma-0 no-shrink">({{ chapterIndex + 1 }}/{{ chapterCount }})</text>
          </div>
          <div class="mb-xs">
            <div class="card ma-0 mr-xs" @click="lastChapter">
              <image src="/common/icon/left.png" class="icon" />
            </div>
            <div class="card ma-0 mr-xs grow justify-center" @click="toCatalog">
              <image src="/common/icon/catalog.png" class="icon" />
              <text class="card-btn-text center">目录</text>
            </div>
            <div class="card ma-0" @click="nextChapter">
              <image src="/common/icon/right.png" class="icon" />
            </div>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/refresh.png" class="icon" />
            <text class="card-btn-text center">刷新</text>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/down.png" class="icon" />
            <text class="card-btn-text center">缓存</text>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/magic.png" class="icon" />
            <text class="card-btn-text center">替换净化</text>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/up.png" class="icon" />
            <text class="card-btn-text center">更新目录</text>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/library.png" class="icon" />
            <text class="card-btn-text center">换源</text>
          </div>
          <div class="card" @click="push('pages/setting', [['to', 'read_ui']])">
            <image src="/common/icon/ui.png" class="icon" />
            <text class="card-btn-text center">界面</text>
          </div>
          <div class="card" @click="push('pages/setting', [['to', 'read_setting']])">
            <image src="/common/icon/setting.png" class="icon" />
            <text class="card-btn-text center">设置</text>
          </div>
        </scroll>
      </div>
    </div>
    <div class="cover-animation-helper {{coverAnimation}}"></div>
  </div>
</template>

<script>
const {template, router, device, date, setting, chapter, book, helper} = global

let longpress = false
let bookData = undefined
let thisBook = undefined

export default {
  ...template,
  private: {
    ...template.private,
    menu: "",
    time: date.formatNow("hh:mm"),
    paragraph_weight: setting.get("paragraph_weight"),
    paragraph_size: setting.get("paragraph_size"),
    paragraph_spacing: setting.get("paragraph_spacing"),
    chapter_title_align: setting.get("chapter_title_align"),
    chapter_title_size: setting.get("chapter_title_size"),
    chapter_title_top_margin: setting.get("chapter_title_top_margin"),
    chapter_title_bottom_margin: setting.get("chapter_title_bottom_margin"),
    bookData: undefined,
    bookName: undefined,
    chapter: undefined,
    chapterIndex: undefined,
    chapterCount: undefined,
    content: [],
    loading: false,
    lock: 0,
    last: false
  },
  ...router,
  onReady() {
    try {
      bookData = JSON.parse(this.bookData)
      if (bookData.toc?.length === 0) {
        this.toast("目录为空")
        throw new Error("目录为空")
      }
      thisBook = book.getBook(bookData.bookSourceUrl, bookData.bookUrl)
      console.log(thisBook)
      this.bookName = bookData.name
      this.chapterCount = bookData.toc.length
      this.chapterIndex = thisBook?.progress ?? 0
      this.load()
    } catch (e) {
      this.toast("参数错误")
      this.back()
    }
  },
  onInit() {
    setInterval(() => {
      this.time = date.formatNow("hh:mm")
    }, 1000)
  },
  onBack() {
    if (this.menu === "animation-in") {
      this.toggleMenu()
      return true
    }
  },
  toggleMenu(close) {
    if (this.menu === "animation-in" || close === true) {
      this.menu = "animation-out-back"
    } else {
      this.menu = "animation-in"
    }
  },
  onLongPress() {
    longpress = true
    this.toggleMenu()
  },
  async onClick(evt) {
    if (longpress) {
      longpress = false
      return
    }
    const click_to_turn_page = setting.get("click_to_turn_page")
    const info = await device.getInfo()
    if (click_to_turn_page === "vertical") {
      if (evt.clientY < info.screenHeight / 2) {
        this.lastPage()
      } else {
        this.nextPage()
      }
    } else if (click_to_turn_page === "horizontal") {
      if (evt.clientX < info.screenWidth / 2) {
        this.lastPage()
      } else {
        this.nextPage()
      }
    }
  },
  async nextPage() {
    this.$element("body").scrollBy({
      top: this.bodyHeight,
      behavior: setting.get("smooth_scroll") ? "smooth" : "auto"
    })
  },
  async lastPage() {
    this.$element("body").scrollBy({
      top: -this.bodyHeight,
      behavior: setting.get("smooth_scroll") ? "smooth" : "auto"
    })
  },
  updateSetting() {
    this.paragraph_weight = setting.get("paragraph_weight")
    this.paragraph_size = setting.get("paragraph_size")
    this.paragraph_spacing = setting.get("paragraph_spacing")
    this.chapter_title_align = setting.get("chapter_title_align")
    this.chapter_title_size = setting.get("chapter_title_size")
    this.chapter_title_top_margin = setting.get("chapter_title_top_margin")
    this.chapter_title_bottom_margin = setting.get("chapter_title_bottom_margin")
  },
  toCatalog() {
    if (!thisBook.toc) {
      this.toast("目录加载中")
      return
    }
    this.push("/pages/catalog", [["bookData", thisBook ?? bookData]])
  },
  nextChapter() {
    this.chapterIndex++
    this.load()
  },
  lastChapter() {
    this.chapterIndex--
    if (bookData.toc?.[this.chapterIndex]?.isVolume) {
      return this.lastChapter()
    }
    this.last = true
    this.load()
  },
  load() {
    if (this.loading) {
      this.toast("正在加载中，请勿重复操作")
      return
    }
    if (bookData.toc?.[this.chapterIndex]?.isVolume) {
      this.chapterIndex++
      return this.load()
    }
    if (this.chapterIndex >= bookData.toc.length) {
      this.toast("没有更多章节了")
      return
    }
    this.loading = true
    this.toast("正在加载中")
    this.chapter = bookData.toc[this.chapterIndex]
    chapter
      .defineChapter(this.chapter, bookData)
      .getContent()
      .then((content) => {
        this.content = content.split("\n")
        if (thisBook && thisBook?.progress !== this.chapterIndex) {
          thisBook.progress = this.chapterIndex
        }
        helper.sleep(0).then(() => {
          this.loading = false
          this.toggleMenu(true)
          console.log(this.last)
          if (thisBook || this.last) {
            this.$element("body").getScrollRect({
              success: ({height}) => {
                if (thisBook && !this.last) {
                  this.$element("body").scrollTo({
                    top: height * (thisBook.fProgress - thisBook.progress),
                    behavior: "auto"
                  })
                } else {
                  this.$element("body").scrollTo({
                    top: height - 1
                  })
                  this.last = false
                }
              }
            })
          } else {
            this.$element("body").scrollTo({
              top: 1,
              behavior: "auto"
            })
          }
        })
      })
      .catch((err) => {
        this.toast(err)
      })
  },
  scrolltop() {
    if (this.lock === 0) {
      this.lock++
      helper.sleep(2000).then(() => {
        this.lock = 0
      })
      return
    }
    if (this.lock === 1) {
      this.toast("再拉一下加载上一章")
      this.lock++
      return
    }
    this.lastChapter()
  },
  scrollbottom() {
    if (this.lock === 0) {
      this.lock++
      helper.sleep(2000).then(() => {
        this.lock = 0
      })
      return
    }
    if (this.lock === 1) {
      this.toast("再拉一次加载下一章")
      this.lock++
      return
    }
    this.nextChapter()
  },
  scroll(event) {
    if (thisBook) {
      this.$element("body").getScrollRect({
        success({height}) {
          thisBook.fProgress = thisBook.progress + event.scrollY / height
        }
      })
    }
  }
}
</script>

<style>
@import url(../../common/css/page.css);

.chapter {
  font-weight: bold;
}
</style>